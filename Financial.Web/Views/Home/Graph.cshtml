@model Dictionary<string, decimal>

<style>
    #chartdiv {
	width		: 100%;
	height		: 500px;
	font-size	: 11px;
}					
</style>
<script src="http://www.amcharts.com/lib/3/amcharts.js"></script>
<script src="http://www.amcharts.com/lib/3/serial.js"></script>
<script src="http://www.amcharts.com/lib/3/themes/light.js"></script>
<div id="chartdiv"></div>					
<script>
    var chart = AmCharts.makeChart("chartdiv", {
        "type": "serial",
        "theme": "light",
        "dataProvider": [
            @foreach (var item in Model)
            {
                @:{
                    @:"Category": "@item.Key",
                    @:"Spent": @item.Value
                    @:}@if (!Model.LastOrDefault().Equals(item))
                {
                     @:,
                }
            }
            ],
            "valueAxes": [{
                "gridColor": "#FFFFFF",
                "gridAlpha": 0.2,
                "dashLength": 0
            }],
            "gridAboveGraphs": true,
            "startDuration": 1,
            "graphs": [{
                "balloonText": "[[category]]: <b>[[value]]</b>",
                "fillAlphas": 0.8,
                "lineAlpha": 0.2,
                "type": "column",
                "valueField": "Spent"
            }],
            "chartCursor": {
                "categoryBalloonEnabled": false,
                "cursorAlpha": 0,
                "zoomable": false
            },
            "categoryField": "Category",
            "categoryAxis": {
                "gridPosition": "start",
                "gridAlpha": 0,
                "tickPosition": "start",
                "tickLength": 20
            },
            "export": {
                "enabled": true
            }

        });
</script>















@*@model int

@{
    ViewBag.Title = "Graph";
}

<h2>Graph</h2>

@section scripts {
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js" charset="utf-8"></script>
<script type="text/javascript">

		
    nv.addGraph(function () {
        var chart = nv.models.discreteBarChart()
            .x(function (d) { return d.label })    //Specify the data accessors.
            .y(function (d) { return d.value })
            .staggerLabels(true)    //Too many bars and not enough room? Try staggering labels.
            .tooltips(true)        //Don't show tooltips
            .showValues(true)       //...instead, show the bar value right on top of each bar.
            .transitionDuration(350)
        ;

        d3.select('#chart svg')
            .datum(exampleData())
            .call(chart);

        nv.utils.windowResize(chart.update);

        return chart;
    });

    //Each bar represents a single discrete quantity.
    function exampleData() {
        $.ajax({
            url: '@Url.Action("CategoryAmounts", "Home", new { id = Model })',
            dataType: 'json',
            success: function (json) {
                return [
           {
               key: "Categories",
               values: json
               }
                ]
            }
        });
    }


    </script>
    }*@